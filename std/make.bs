const fs = import("std/fs")

class Rule
    define __init(self, out, deps)
        self.out = out
        self.deps = deps
        self.cmds = []
    end
end

CC = "gcc"
const OBJs = []
const rules = []

define set_compiler(cc) 
    CC = cc
end

current_rule = Rule("", [])

define rule(out, deps, f)
    current_rule = Rule(out, deps)
    f()
    rules.insert(0, current_rule)
end

define cmd(...args)
    current_rule.cmds.push(args)
end

define src(path, ...headers)
    obj_path = path + ".o"
    OBJs.push(obj_path)
    rule(obj_path, [path, ...headers], define()
        cmd(CC, "-c", "-o", obj_path, path)
    end)
end

define target(path)
    rule(path, OBJs, define()
        cmd(CC, "-o", path, ...OBJs)
    end)
end 

define build()
    out = ""
    for rule in rules
        out = out + rule.out + ": "
        for dep in rule.deps
            out = out + dep + " "
        end
        out = out + "\n"

        for cmd in rule.cmds
            out = out + "\t"
            for arg in cmd
                out = out + arg + " "
            end
            out = out + "\n"
        end
    end
    fs.write_file("Makefile", out)
end

